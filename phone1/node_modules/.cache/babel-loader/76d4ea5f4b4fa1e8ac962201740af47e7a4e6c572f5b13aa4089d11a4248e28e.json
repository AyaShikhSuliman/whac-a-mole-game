{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nconst WS_URL = 'http://localhost:8080/ws-game'; // Replace with your WebSocket server URL\n\nlet stompClient = null;\nexport const connectWebSocket = onMessageReceived => {\n  const socket = new SockJS(WS_URL);\n  stompClient = Stomp.over(socket);\n  stompClient.connect({}, () => {\n    console.log(onMessageReceived);\n    stompClient.subscribe('/topic/game-state', message => {\n      const messageBody = JSON.parse(message.body);\n      onMessageReceived(messageBody);\n      console.log(onMessageReceived);\n    });\n  });\n};\nexport const sendGameAction = gameAction => {\n  console.log('game action sent');\n  if (stompClient && stompClient.connected) {\n    stompClient.send('/app/game', {}, JSON.stringify(gameAction));\n  } else {\n    console.warn('WebSocket is not connected');\n  }\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient && stompClient.connected) {\n    stompClient.disconnect(() => {\n      console.log('WebSocket connection closed');\n    });\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","WS_URL","stompClient","connectWebSocket","onMessageReceived","socket","over","connect","console","log","subscribe","message","messageBody","JSON","parse","body","sendGameAction","gameAction","connected","send","stringify","warn","disconnectWebSocket","disconnect"],"sources":["C:/Users/ACER/Desktop/Semester 4/Individual/phone1/src/WebSocketService.js"],"sourcesContent":["\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\n\r\nconst WS_URL = 'http://localhost:8080/ws-game'; // Replace with your WebSocket server URL\r\n\r\nlet stompClient = null;\r\n\r\nexport const connectWebSocket = (onMessageReceived) => {\r\n  const socket = new SockJS(WS_URL);\r\n  stompClient = Stomp.over(socket);\r\n  stompClient.connect({}, () => {\r\n    console.log(onMessageReceived);\r\n    stompClient.subscribe('/topic/game-state', (message) => {\r\n      const messageBody = JSON.parse(message.body);\r\n      onMessageReceived(messageBody);\r\n      console.log(onMessageReceived);\r\n    });\r\n  });\r\n};\r\n\r\nexport const sendGameAction = (gameAction) => {\r\n  console.log('game action sent');\r\n  if (stompClient && stompClient.connected) {\r\n    stompClient.send('/app/game', {}, JSON.stringify(gameAction));\r\n  } else {\r\n    console.warn('WebSocket is not connected');\r\n  }\r\n};\r\n\r\nexport const disconnectWebSocket = () => {\r\n  if (stompClient && stompClient.connected) {\r\n    stompClient.disconnect(() => {\r\n      console.log('WebSocket connection closed');\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AACA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,MAAM,GAAG,+BAA+B,CAAC,CAAC;;AAEhD,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,gBAAgB,GAAIC,iBAAiB,IAAK;EACrD,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAACE,MAAM,CAAC;EACjCC,WAAW,GAAGF,KAAK,CAACM,IAAI,CAACD,MAAM,CAAC;EAChCH,WAAW,CAACK,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAACL,iBAAiB,CAAC;IAC9BF,WAAW,CAACQ,SAAS,CAAC,mBAAmB,EAAGC,OAAO,IAAK;MACtD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC5CX,iBAAiB,CAACQ,WAAW,CAAC;MAC9BJ,OAAO,CAACC,GAAG,CAACL,iBAAiB,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMY,cAAc,GAAIC,UAAU,IAAK;EAC5CT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAC/B,IAAIP,WAAW,IAAIA,WAAW,CAACgB,SAAS,EAAE;IACxChB,WAAW,CAACiB,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAEN,IAAI,CAACO,SAAS,CAACH,UAAU,CAAC,CAAC;EAC/D,CAAC,MAAM;IACLT,OAAO,CAACa,IAAI,CAAC,4BAA4B,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAIpB,WAAW,IAAIA,WAAW,CAACgB,SAAS,EAAE;IACxChB,WAAW,CAACqB,UAAU,CAAC,MAAM;MAC3Bf,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}