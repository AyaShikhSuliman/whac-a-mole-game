{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\Semester 4\\\\Individual\\\\phone1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { connectWebSocket, disconnectWebSocket } from '../WebSocketService'; // Import WebSocket functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [screenColor, setScreenColor] = useState('red');\n  const [score, setScore] = useState(0);\n\n  // Function to simulate screen color changes\n  const changeScreenColor = () => {\n    if (screenColor === 'red') {\n      setScreenColor('green');\n    } else {\n      setScreenColor('red');\n    }\n  };\n\n  // Simulate screen color changes at a random interval\n  useEffect(() => {\n    const intervalId = setInterval(changeScreenColor, Math.random() * 2000 + 1000);\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [screenColor]);\n  useEffect(() => {\n    connectWebSocket(handleWebSocketMessage);\n\n    // Clean up the WebSocket connection when the component unmounts\n    return () => {\n      disconnectWebSocket();\n    };\n  }, []);\n\n  // Callback function to handle WebSocket messages\n  const handleWebSocketMessage = message => {\n    // Process incoming WebSocket messages here\n    // Update screen color and score based on the game state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phone App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Screen, {\n      color: screenColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/DuI6zw8Qk8UCl03jRSXkT0ntUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Screen","ScoreDisplay","connectWebSocket","disconnectWebSocket","jsxDEV","_jsxDEV","App","_s","screenColor","setScreenColor","score","setScore","changeScreenColor","intervalId","setInterval","Math","random","clearInterval","handleWebSocketMessage","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/Semester 4/Individual/phone1/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { connectWebSocket, disconnectWebSocket } from '../WebSocketService'; // Import WebSocket functions\n\nfunction App() {\n  const [screenColor, setScreenColor] = useState('red');\n  const [score, setScore] = useState(0);\n\n  // Function to simulate screen color changes\n  const changeScreenColor = () => {\n    if (screenColor === 'red') {\n      setScreenColor('green');\n    } else {\n      setScreenColor('red');\n    }\n  };\n\n  // Simulate screen color changes at a random interval\n  useEffect(() => {\n    const intervalId = setInterval(changeScreenColor, Math.random() * 2000 + 1000);\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [screenColor]);\n\n  useEffect(() => {\n    connectWebSocket(handleWebSocketMessage);\n\n    // Clean up the WebSocket connection when the component unmounts\n    return () => {\n      disconnectWebSocket();\n    };\n  }, []);\n\n  // Callback function to handle WebSocket messages\n  const handleWebSocketMessage = (message) => {\n    // Process incoming WebSocket messages here\n    // Update screen color and score based on the game state\n  };\n\n\n  return (\n    <div className=\"App\">\n      <h1>Phone App</h1>\n      <Screen color={screenColor} />\n      <ScoreDisplay score={score} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,qBAAqB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIJ,WAAW,KAAK,KAAK,EAAE;MACzBC,cAAc,CAAC,OAAO,CAAC;IACzB,CAAC,MAAM;MACLA,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGC,WAAW,CAACF,iBAAiB,EAAEG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;;IAE9E;IACA,OAAO,MAAMC,aAAa,CAACJ,UAAU,CAAC;EACxC,CAAC,EAAE,CAACL,WAAW,CAAC,CAAC;EAEjBT,SAAS,CAAC,MAAM;IACdG,gBAAgB,CAACgB,sBAAsB,CAAC;;IAExC;IACA,OAAO,MAAM;MACXf,mBAAmB,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,sBAAsB,GAAIC,OAAO,IAAK;IAC1C;IACA;EAAA,CACD;EAGD,oBACEd,OAAA;IAAKe,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBhB,OAAA;MAAAgB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBpB,OAAA,CAACL,MAAM;MAAC0B,KAAK,EAAElB;IAAY;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9BpB,OAAA,CAACJ,YAAY;MAACS,KAAK,EAAEA;IAAM;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV;AAAClB,EAAA,CA5CQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}