{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Client } from 'webstomp-client';\nconst WS_URL = 'http://localhost:8080/ws-game'; // Replace with your WebSocket server URL\n\nlet stompClient = null;\nexport const connectWebSocket = onMessageReceived => {\n  const socket = new WebSocket(WS_URL);\n  stompClient = new Client({\n    webSocketFactory: () => socket\n  });\n  stompClient.activate();\n  stompClient.onConnect = () => {\n    console.log('WebSocket connected');\n    stompClient.subscribe('/topic/game-state', message => {\n      const messageBody = JSON.parse(message.body);\n      onMessageReceived(messageBody);\n    });\n  };\n};\nexport const sendGameAction = gameAction => {\n  if (stompClient && stompClient.active) {\n    stompClient.publish({\n      destination: '/app/game',\n      body: JSON.stringify(gameAction)\n    });\n  } else {\n    console.warn('WebSocket is not connected');\n  }\n};\nexport const disconnectWebSocket = () => {\n  if (stompClient && stompClient.connected) {\n    stompClient.disconnect(() => {\n      console.log('WebSocket connection closed');\n    });\n  }\n};","map":{"version":3,"names":["SockJS","Client","WS_URL","stompClient","connectWebSocket","onMessageReceived","socket","WebSocket","webSocketFactory","activate","onConnect","console","log","subscribe","message","messageBody","JSON","parse","body","sendGameAction","gameAction","active","publish","destination","stringify","warn","disconnectWebSocket","connected","disconnect"],"sources":["C:/Users/ACER/Desktop/Semester 4/Individual/phone1/src/WebSocketService.js"],"sourcesContent":["import SockJS from 'sockjs-client';\r\nimport { Client } from 'webstomp-client';\r\n\r\nconst WS_URL = 'http://localhost:8080/ws-game'; // Replace with your WebSocket server URL\r\n\r\nlet stompClient = null;\r\n\r\nexport const connectWebSocket = (onMessageReceived) => {\r\n  const socket = new WebSocket(WS_URL);\r\n  stompClient = new Client({ webSocketFactory: () => socket });\r\n\r\n  stompClient.activate();\r\n\r\n  stompClient.onConnect = () => {\r\n    console.log('WebSocket connected');\r\n    stompClient.subscribe('/topic/game-state', (message) => {\r\n      const messageBody = JSON.parse(message.body);\r\n      onMessageReceived(messageBody);\r\n    });\r\n  };\r\n};\r\n\r\nexport const sendGameAction = (gameAction) => {\r\n  if (stompClient && stompClient.active) {\r\n    stompClient.publish({\r\n      destination: '/app/game',\r\n      body: JSON.stringify(gameAction),\r\n    });\r\n  } else {\r\n    console.warn('WebSocket is not connected');\r\n  }\r\n};\r\n\r\nexport const disconnectWebSocket = () => {\r\n  if (stompClient && stompClient.connected) {\r\n    stompClient.disconnect(() => {\r\n      console.log('WebSocket connection closed');\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,MAAM,QAAQ,iBAAiB;AAExC,MAAMC,MAAM,GAAG,+BAA+B,CAAC,CAAC;;AAEhD,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,gBAAgB,GAAIC,iBAAiB,IAAK;EACrD,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAACL,MAAM,CAAC;EACpCC,WAAW,GAAG,IAAIF,MAAM,CAAC;IAAEO,gBAAgB,EAAEA,CAAA,KAAMF;EAAO,CAAC,CAAC;EAE5DH,WAAW,CAACM,QAAQ,CAAC,CAAC;EAEtBN,WAAW,CAACO,SAAS,GAAG,MAAM;IAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCT,WAAW,CAACU,SAAS,CAAC,mBAAmB,EAAGC,OAAO,IAAK;MACtD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAC5Cb,iBAAiB,CAACU,WAAW,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,cAAc,GAAIC,UAAU,IAAK;EAC5C,IAAIjB,WAAW,IAAIA,WAAW,CAACkB,MAAM,EAAE;IACrClB,WAAW,CAACmB,OAAO,CAAC;MAClBC,WAAW,EAAE,WAAW;MACxBL,IAAI,EAAEF,IAAI,CAACQ,SAAS,CAACJ,UAAU;IACjC,CAAC,CAAC;EACJ,CAAC,MAAM;IACLT,OAAO,CAACc,IAAI,CAAC,4BAA4B,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAIvB,WAAW,IAAIA,WAAW,CAACwB,SAAS,EAAE;IACxCxB,WAAW,CAACyB,UAAU,CAAC,MAAM;MAC3BjB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}