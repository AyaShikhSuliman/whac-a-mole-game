{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Desktop\\\\Semester 4\\\\Individual\\\\phone1\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { connectWebSocket, disconnectWebSocket, sendGameAction } from './WebSocketService'; // Import WebSocket functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [screenColor, setScreenColor] = useState('red');\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    connectWebSocket(handleWebSocketMessage, handleScoreUpdate);\n\n    // Clean up the WebSocket connection when the component unmounts\n    return () => {\n      disconnectWebSocket();\n    };\n  }, []);\n\n  // Function to simulate screen color changes\n  const changeScreenColor = () => {\n    if (screenColor === 'red') {\n      setScreenColor('green');\n    } else {\n      setScreenColor('red');\n    }\n  };\n\n  // Simulate screen color changes at a random interval\n  useEffect(() => {\n    const intervalId = setInterval(changeScreenColor, Math.random() * 2000 + 1000);\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [screenColor]);\n\n  // Callback function to handle WebSocket messages\n  const handleWebSocketMessage = message => {\n    console.log(message);\n    switch (message.type) {\n      case 'screenUpdate':\n        // Update the screen color based on the received message\n        setScreenColor(message.screens);\n        break;\n      default:\n        // Handle other message types if needed\n        break;\n    }\n  };\n  const handleScoreUpdate = score => {\n    console.log(score);\n    // Update the score in your component's state or UI\n    setScore(score);\n  };\n  const handleScreenTap = () => {\n    if (screenColor[0] === 'green') {\n      // Send a \"tap\" action to the server\n      const gameAction = {\n        type: 'tap',\n        // Define your action type as needed\n        screenIndex: 0 // Adjust the screen index based on your setup\n      };\n\n      sendGameAction(gameAction);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Phone App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Screen, {\n      colors: screenColor,\n      onScreenTap: handleScreenTap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/DuI6zw8Qk8UCl03jRSXkT0ntUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Screen","ScoreDisplay","connectWebSocket","disconnectWebSocket","sendGameAction","jsxDEV","_jsxDEV","App","_s","screenColor","setScreenColor","score","setScore","handleWebSocketMessage","handleScoreUpdate","changeScreenColor","intervalId","setInterval","Math","random","clearInterval","message","console","log","type","screens","handleScreenTap","gameAction","screenIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","colors","onScreenTap","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Desktop/Semester 4/Individual/phone1/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Screen from './components/Screen';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { connectWebSocket, disconnectWebSocket, sendGameAction } from './WebSocketService'; // Import WebSocket functions\n\n\nfunction App() {\n  const [screenColor, setScreenColor] = useState('red');\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    connectWebSocket(handleWebSocketMessage, handleScoreUpdate);\n\n    // Clean up the WebSocket connection when the component unmounts\n    return () => {\n      disconnectWebSocket();\n    };\n  }, []);\n\n  // Function to simulate screen color changes\n  const changeScreenColor = () => {\n    if (screenColor === 'red') {\n      setScreenColor('green');\n    } else {\n      setScreenColor('red');\n    }\n  };\n\n  // Simulate screen color changes at a random interval\n  useEffect(() => {\n    const intervalId = setInterval(changeScreenColor, Math.random() * 2000 + 1000);\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [screenColor]);\n\n\n\n  // Callback function to handle WebSocket messages\n  const handleWebSocketMessage = (message) => {\n    console.log(message)\n    switch (message.type) {\n      case 'screenUpdate':\n        // Update the screen color based on the received message\n        setScreenColor(message.screens);\n        break;\n      default:\n        // Handle other message types if needed\n        break;\n    }\n  };\n\n  const handleScoreUpdate = (score) => {\n    console.log(score)\n    // Update the score in your component's state or UI\n    setScore(score);\n  };\n\n\n\n  const handleScreenTap = () => {\n    if (screenColor[0] === 'green') {\n      // Send a \"tap\" action to the server\n      const gameAction = {\n        type: 'tap', // Define your action type as needed\n        screenIndex: 0, // Adjust the screen index based on your setup\n      };\n      sendGameAction(gameAction);\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <h1>Phone App</h1>\n      <Screen colors={screenColor} onScreenTap={handleScreenTap} />\n      <ScoreDisplay score={score} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,cAAc,QAAQ,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG5F,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAErCC,SAAS,CAAC,MAAM;IACdG,gBAAgB,CAACW,sBAAsB,EAAEC,iBAAiB,CAAC;;IAE3D;IACA,OAAO,MAAM;MACXX,mBAAmB,CAAC,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIN,WAAW,KAAK,KAAK,EAAE;MACzBC,cAAc,CAAC,OAAO,CAAC;IACzB,CAAC,MAAM;MACLA,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACd,MAAMiB,UAAU,GAAGC,WAAW,CAACF,iBAAiB,EAAEG,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;IAC9E;IACA,OAAO,MAAMC,aAAa,CAACJ,UAAU,CAAC;EACxC,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC;;EAIjB;EACA,MAAMI,sBAAsB,GAAIQ,OAAO,IAAK;IAC1CC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACpB,QAAQA,OAAO,CAACG,IAAI;MAClB,KAAK,cAAc;QACjB;QACAd,cAAc,CAACW,OAAO,CAACI,OAAO,CAAC;QAC/B;MACF;QACE;QACA;IACJ;EACF,CAAC;EAED,MAAMX,iBAAiB,GAAIH,KAAK,IAAK;IACnCW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;IAClB;IACAC,QAAQ,CAACD,KAAK,CAAC;EACjB,CAAC;EAID,MAAMe,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIjB,WAAW,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;MAC9B;MACA,MAAMkB,UAAU,GAAG;QACjBH,IAAI,EAAE,KAAK;QAAE;QACbI,WAAW,EAAE,CAAC,CAAE;MAClB,CAAC;;MACDxB,cAAc,CAACuB,UAAU,CAAC;IAC5B;EACF,CAAC;EAGD,oBACErB,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBxB,OAAA;MAAAwB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB5B,OAAA,CAACN,MAAM;MAACmC,MAAM,EAAE1B,WAAY;MAAC2B,WAAW,EAAEV;IAAgB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7D5B,OAAA,CAACL,YAAY;MAACU,KAAK,EAAEA;IAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEV;AAAC1B,EAAA,CAxEQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA0EZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}